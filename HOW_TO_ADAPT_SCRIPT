Install Doctor: Multi-OS provisioning made easy

  Using this script for the first time? Check out our documentation https://install.doctor/docs for the complete
  rundown on how you can fork / modify our project to make it your own. Completely headlessly provision your
  workstations with thousands of useful software packages, integrated into your system via a well-thought secret
  management engine and meticulous configurations.

  ## Customizing

  Adapting this project for your own purposes basically boils down to a few steps:

  1. Fork our GitHub project https://github.com/megabyte-labs/install.doctor/fork.
  2. Generate an Age encryption key.
  3. Use the Age encryption key to populate the secrets in  home/.chezmoitemplates . For help, check out the Secrets
  documentation https://install.doctor/docs/customization/secrets.
  4. Customize the values in  home/.chezmoidata.yaml  and  home/.chezmoi.yaml.tmpl .

  ## Headless Deploy

  With all that in order, the next time you can headlessly provision your workstation by running:

    export AGE_PASSWORD=YourAgePassword
    export START_REPO=GitHubUsername
    export SUDO_PASSWORD=YourSudoPassword
    bash <(curl -sSL https://install.doctor/start)




    ...




    INFO Provisioning complete!

   Post-Installation

  The script has finished provisioning. Enjoy! You can review the installation logs which are stored at
  ~/.local/var/log/install.doctor/install.doctor.$(date +%s).log . If you come across any issues, have some good
  ideas, or want to get involved, feel free to open an issue on GitHub https://github.com/megabyte-labs/install.doctor
  or check out our Community https://install.doctor/community. Pull requests / stars are welcome too.

  ## Next Steps

  1. Fork the project so you can add your own customizations (using the method described at the top of the README.md)
  2. Review the README.md https://github.com/megabyte-labs/install.doctor for a high-level overview
  3. Utilize the Install Doctor documentation https://install.doctor/docs for more thorough details
  4. Check out the Chezmoi documentation https://www.chezmoi.io/ (since this project utilizes it heavily)
  5. Open a pull request with your own improvements if you want to contribute
  6. Visit Megabyte Labs https://megabyte.space to see what else we are up to

  bZ out

  Note: Some of the settings / applications might require a reboot (or at the very least, a terminal reload).

---

AUTOMATING THE PROMPTS

MacOS:

export HEADLESS_INSTALL=true
export SOFTWARE_GROUP=Standard-Desktop
export FULL_NAME="Joe Shmoe"
export PRIMARY_EMAIL="help@megabyte.space"
export PUBLIC_SERVICES_DOMAIN="megabyte.space"
export START_REPO=my-gh-user/my-fork-name
bash <(curl -sSL https://install.doctor/start)


Windows:

$env:HEADLESS_INSTALL = true
$env:SOFTWARE_GROUP = Standard-Desktop
$env:FULL_NAME = 'Joe Shmoe'
$env:PRIMARY_EMAIL = 'help@megabyte.space'
$env:PUBLIC_SERVICES_DOMAIN = 'megabyte.space'
$env:START_REPO = 'my-gh-user/my-fork-name'
iex ((New-Object System.Net.WebClient).DownloadString('https://install.doctor/windows'))


Qubes:

export HEADLESS_INSTALL=true
export SOFTWARE_GROUP=Standard-Desktop
export FULL_NAME="Joe Shmoe"
export PRIMARY_EMAIL="help@megabyte.space"
export PUBLIC_SERVICES_DOMAIN="megabyte.space"
export START_REPO=my-gh-user/my-fork-name
qvm-run --pass-io sys-firewall "curl -sSL https://install.doctor/qubes" > ~/setup.sh
bash ~/setup.sh
